name: Deploy Art'Beau Pointage

on:
  push:
    branches: [ main, master ]
  workflow_dispatch:

env:
  SERVER_HOST: ${{ secrets.SERVER_HOST }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
  REPOSITORY_PATH: /home/ubuntu/artbeau-pointage

jobs:
  test:
    runs-on: ubuntu-latest
    name: Tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: |
          frontend/package-lock.json
          backend/package-lock.json

    - name: Install Frontend Dependencies
      run: cd frontend && npm ci

    - name: Install Backend Dependencies
      run: cd backend && npm ci

    - name: Build Frontend
      run: cd frontend && npm run build

    - name: Test Backend
      run: cd backend && npm test
      continue-on-error: true

    - name: Lint Check
      run: |
        cd frontend && npm run lint || true
        cd ../backend && npm run lint || true
      continue-on-error: true

  deploy:
    needs: test
    runs-on: ubuntu-latest
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts

    - name: Create deployment package
      run: |
        echo "📦 Création du package de déploiement..."
        
        # Créer le package sans les fichiers inutiles
        tar --exclude='node_modules' \
            --exclude='.git' \
            --exclude='frontend/node_modules' \
            --exclude='backend/node_modules' \
            --exclude='frontend/build' \
            --exclude='backend/data' \
            --exclude='backend/logs' \
            --exclude='*.log' \
            --exclude='.DS_Store' \
            -czf deployment-package.tar.gz .

    - name: Upload to server
      run: |
        echo "📤 Upload vers le serveur..."
        
        # Créer le répertoire sur le serveur
        ssh $SERVER_USER@$SERVER_HOST "mkdir -p $REPOSITORY_PATH"
        
        # Transférer le package
        scp deployment-package.tar.gz $SERVER_USER@$SERVER_HOST:$REPOSITORY_PATH/
        
        # Extraire sur le serveur
        ssh $SERVER_USER@$SERVER_HOST "
          cd $REPOSITORY_PATH &&
          tar -xzf deployment-package.tar.gz &&
          rm deployment-package.tar.gz
        "

    - name: Deploy application
      run: |
        echo "🚀 Déploiement de l'application..."
        
        ssh $SERVER_USER@$SERVER_HOST "
          cd $REPOSITORY_PATH &&
          
          # Rendre les scripts exécutables
          chmod +x deploy.sh deploy-ssl*.sh scripts/*.sh &&
          
          # Déployer l'application
          ./deploy.sh &&
          
          # Configurer SSL si nécessaire
          if [ -f deploy-ssl-automatic.sh ]; then
            ./deploy-ssl-automatic.sh || echo 'SSL configuration failed, continuing...'
          fi
        "

    - name: Health check
      run: |
        echo "🏥 Vérification de la santé de l'application..."
        
        # Attendre que l'application démarre
        sleep 30
        
        # Vérifier que l'application répond
        ssh $SERVER_USER@$SERVER_HOST "
          cd $REPOSITORY_PATH &&
          
          # Tester l'endpoint de santé
          for i in {1..5}; do
            if curl -f http://localhost/health > /dev/null 2>&1; then
              echo '✅ Application accessible'
              exit 0
            fi
            echo \"Tentative \$i/5 échouée, attente...\"
            sleep 10
          done
          
          echo '❌ Application non accessible après déploiement'
          docker-compose -f docker-compose.prod.yml logs --tail=20
          exit 1
        "

    - name: Notification
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Déploiement réussi sur https://pointage.artbeaurescence.sn"
        else
          echo "❌ Déploiement échoué"
        fi
      
  cleanup:
    needs: deploy
    runs-on: ubuntu-latest
    name: Cleanup
    if: always()

    steps:
    - name: Server cleanup
      uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}
      
    - name: Clean old deployments
      run: |
        ssh $SERVER_USER@$SERVER_HOST "
          # Nettoyer les images Docker anciennes
          docker image prune -f --filter 'until=72h' || true
          
          # Nettoyer les logs anciens
          find /var/log -name '*.log' -mtime +7 -delete 2>/dev/null || true
          
          # Nettoyer les sauvegardes anciennes (garder 7 dernières)
          cd $REPOSITORY_PATH/backups 2>/dev/null || exit 0
          ls -t backup-*.json | tail -n +8 | xargs rm -f || true
        " || true
