#!/bin/bash

# Script de d√©ploiement pour Art'Beau Pointage
# Usage: ./deploy.sh [server_ip] [user]

set -e  # Arr√™ter en cas d'erreur

# Configuration
SERVER_IP=${1:-"YOUR_SERVER_IP"}
USER=${2:-"root"}
APP_NAME="artbeau-pointage"
REMOTE_DIR="/opt/$APP_NAME"

echo "üöÄ D√©ploiement de $APP_NAME sur $SERVER_IP"

# V√©rifier que les fichiers n√©cessaires existent
if [ ! -f "docker-compose.prod.yml" ]; then
    echo "‚ùå docker-compose.prod.yml introuvable"
    exit 1
fi

if [ ! -f ".env.production" ]; then
    echo "‚ùå .env.production introuvable"
    exit 1
fi

# Cr√©er l'archive du projet
echo "üì¶ Cr√©ation de l'archive..."
tar -czf "${APP_NAME}.tar.gz" \
    --exclude="node_modules" \
    --exclude=".git" \
    --exclude="*.log" \
    --exclude="backend/data/*.db" \
    --exclude="dist" \
    --exclude="build" \
    .

# Copier les fichiers sur le serveur
echo "üì§ Copie des fichiers sur le serveur..."
scp "${APP_NAME}.tar.gz" $USER@$SERVER_IP:/tmp/

# Se connecter au serveur et d√©ployer
echo "üîß D√©ploiement sur le serveur..."
ssh $USER@$SERVER_IP << EOF
    # Arr√™ter les conteneurs existants
    cd $REMOTE_DIR 2>/dev/null && docker-compose -f docker-compose.prod.yml down || true
    
    # Cr√©er le r√©pertoire de d√©ploiement
    mkdir -p $REMOTE_DIR
    cd $REMOTE_DIR
    
    # Sauvegarder l'ancien d√©ploiement
    if [ -d "current" ]; then
        mv current backup-\$(date +%Y%m%d-%H%M%S) || true
    fi
    
    # Extraire la nouvelle version
    mkdir current
    cd current
    tar -xzf /tmp/${APP_NAME}.tar.gz
    
    # Copier le fichier d'environnement (√† personnaliser)
    cp .env.production .env
    
    # Cr√©er les r√©pertoires n√©cessaires
    mkdir -p backend/data backend/logs
    chmod 755 backend/data backend/logs
    
    # Construire et lancer les conteneurs
    docker-compose -f docker-compose.prod.yml build --no-cache
    docker-compose -f docker-compose.prod.yml up -d
    
    # Attendre que les services d√©marrent
    echo "‚è≥ Attente du d√©marrage des services..."
    sleep 30
    
    # V√©rifier que l'application fonctionne
    if curl -f -s http://localhost/health > /dev/null; then
        echo "‚úÖ Application d√©ploy√©e avec succ√®s!"
        echo "üåê Accessible sur: http://$SERVER_IP"
    else
        echo "‚ùå Probl√®me lors du d√©marrage"
        docker-compose -f docker-compose.prod.yml logs --tail=50
        exit 1
    fi
    
    # Nettoyer les anciennes images Docker
    docker image prune -f || true
    
    # Supprimer l'archive temporaire
    rm /tmp/${APP_NAME}.tar.gz
EOF

# Nettoyer localement
rm "${APP_NAME}.tar.gz"

echo ""
echo "üéâ D√©ploiement termin√©!"
echo "üì± Votre application est accessible sur: http://$SERVER_IP"
echo "üìä Health check: http://$SERVER_IP/health"
echo ""
echo "Commands utiles pour le serveur:"
echo "  ‚Ä¢ Voir les logs: ssh $USER@$SERVER_IP 'cd $REMOTE_DIR/current && docker-compose -f docker-compose.prod.yml logs -f'"
echo "  ‚Ä¢ Red√©marrer: ssh $USER@$SERVER_IP 'cd $REMOTE_DIR/current && docker-compose -f docker-compose.prod.yml restart'"
echo "  ‚Ä¢ Arr√™ter: ssh $USER@$SERVER_IP 'cd $REMOTE_DIR/current && docker-compose -f docker-compose.prod.yml down'"
